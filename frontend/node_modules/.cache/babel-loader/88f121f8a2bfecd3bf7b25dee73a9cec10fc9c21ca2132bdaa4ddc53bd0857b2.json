{"ast":null,"code":"var _jsxFileName = \"/home/enginbukum/Documents/React-Apps/Advanced React Route/frontend/src/pages/Error.js\",\n  _s = $RefreshSig$();\nimport { useRouteError } from \"react-router-dom\";\nimport MainNavigation from \"../components/MainNavigation\";\nimport PageContent from \"../components/PageContent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ErrorPage = () => {\n  _s();\n  const error = useRouteError();\n  // console.log(error.status);\n\n  let title = \"An error occurred!\";\n  let message = \"Something went wrong!!\";\n  if (error.status === 500) {\n    message = error.data.message;\n  }\n  //500 error code occurs when the server is not running or the server is not responding to the request. In this case, the error message is set to the message property of the error object.(Events.js/response failure)\n\n  if (error.status === 404) {\n    title = \"Page not found!\";\n    message = \"Could not find the page you were looking for.\";\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageContent, {\n      title: title,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ErrorPage, \"oAgjgbJzsRXlB89+MoVumxMQqKM=\", false, function () {\n  return [useRouteError];\n});\n_c = ErrorPage;\nexport default ErrorPage;\nvar _c;\n$RefreshReg$(_c, \"ErrorPage\");","map":{"version":3,"names":["useRouteError","MainNavigation","PageContent","jsxDEV","_jsxDEV","Fragment","_Fragment","ErrorPage","_s","error","title","message","status","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/enginbukum/Documents/React-Apps/Advanced React Route/frontend/src/pages/Error.js"],"sourcesContent":["import { useRouteError } from \"react-router-dom\";\nimport MainNavigation from \"../components/MainNavigation\";\nimport PageContent from \"../components/PageContent\";\n\nconst ErrorPage = () => {\n  const error = useRouteError();\n  // console.log(error.status);\n\n  let title = \"An error occurred!\";\n  let message = \"Something went wrong!!\";\n\n  if (error.status === 500) {\n    message = error.data.message;\n  }\n  //500 error code occurs when the server is not running or the server is not responding to the request. In this case, the error message is set to the message property of the error object.(Events.js/response failure)\n\n  if (error.status === 404) {\n    title = \"Page not found!\";\n    message = \"Could not find the page you were looking for.\";\n  }\n\n  return (\n    <>\n      <MainNavigation />\n      <PageContent title={title}>\n        <p>{message}</p>\n      </PageContent>\n    </>\n  );\n};\n\nexport default ErrorPage;\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,KAAK,GAAGT,aAAa,EAAE;EAC7B;;EAEA,IAAIU,KAAK,GAAG,oBAAoB;EAChC,IAAIC,OAAO,GAAG,wBAAwB;EAEtC,IAAIF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;IACxBD,OAAO,GAAGF,KAAK,CAACI,IAAI,CAACF,OAAO;EAC9B;EACA;;EAEA,IAAIF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;IACxBF,KAAK,GAAG,iBAAiB;IACzBC,OAAO,GAAG,+CAA+C;EAC3D;EAEA,oBACEP,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACEV,OAAA,CAACH,cAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAClBd,OAAA,CAACF,WAAW;MAACQ,KAAK,EAAEA,KAAM;MAAAI,QAAA,eACxBV,OAAA;QAAAU,QAAA,EAAIH;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAAA,gBACb;AAEP,CAAC;AAACV,EAAA,CAzBID,SAAS;EAAA,QACCP,aAAa;AAAA;AAAAmB,EAAA,GADvBZ,SAAS;AA2Bf,eAAeA,SAAS;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}